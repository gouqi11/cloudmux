// Copyright 2019 Yunion
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package qingcloud

import (
	"context"
	"time"

	"github.com/pkg/errors"
	api "yunion.io/x/cloudmux/pkg/apis/compute"
	"yunion.io/x/cloudmux/pkg/cloudprovider"
	"yunion.io/x/cloudmux/pkg/multicloud"
)

type AutoGenerated struct {
	Action      string      `json:"action"`
	InstanceSet []SInstance `json:"instance_set"`
	RetCode     int         `json:"ret_code"`
	TotalCount  int         `json:"total_count"`
}
type Vxnets struct {
	VxnetName string `json:"vxnet_name"`
	VxnetType int    `json:"vxnet_type"`
	VxnetID   string `json:"vxnet_id"`
	NicID     string `json:"nic_id"`
	PrivateIP string `json:"private_ip"`
}
type Eip struct {
	EipID     string `json:"eip_id"`
	EipAddr   string `json:"eip_addr"`
	Bandwidth string `json:"bandwidth"`
}
type SecurityGroup struct {
	IsDefault       int    `json:"is_default"`
	SecurityGroupID string `json:"security_group_id"`
}
type Image struct {
	ProcessorType string `json:"processor_type"`
	Platform      string `json:"platform"`
	ImageSize     int    `json:"image_size"`
	ImageName     string `json:"image_name"`
	ImageID       string `json:"image_id"`
	OsFamily      string `json:"os_family"`
	Provider      string `json:"provider"`
}
type SInstance struct {
	multicloud.SInstanceBase
	SQingTag
	host *SHost

	VcpusCurrent     int           `json:"vcpus_current"`
	InstanceID       string        `json:"instance_id"`
	VolumeIds        []string      `json:"volume_ids"`
	Vxnets           []Vxnets      `json:"vxnets"`
	Eip              Eip           `json:"eip"`
	MemoryCurrent    int           `json:"memory_current"`
	SubCode          int           `json:"sub_code"`
	TransitionStatus string        `json:"transition_status"`
	InstanceName     string        `json:"instance_name"`
	InstanceType     string        `json:"instance_type"`
	CreateTime       time.Time     `json:"create_time"`
	Status           string        `json:"status"`
	Description      interface{}   `json:"description"`
	SecurityGroup    SecurityGroup `json:"security_group"`
	StatusTime       time.Time     `json:"status_time"`
	Image            Image         `json:"image"`
	KeypairIds       []string      `json:"keypair_ids"`
}

func (region *SRegion) GetInstances() ([]SInstance, error) {
	resp, err := region.client.request("ec2", region.Region, "DescribeInstances", nil)
	if err != nil {
		return nil, errors.Wrap(err, "list instance")
	}
	instances := []SInstance{}
	err = resp.Unmarshal(&instances, "InstancesSet")
	if err != nil {
		return nil, errors.Wrap(err, "unmarshal instances")
	}
	return instances, nil
}

func (ins *SInstance) AssignSecurityGroup(secgroupId string) error {
	return nil
}

func (ins *SInstance) AttachDisk(ctx context.Context, diskId string) error {
	return nil
}

func (ins *SInstance) ChangeConfig(ctx context.Context, config *cloudprovider.SManagedVMChangeConfig) error {
	return nil
}

func (ins *SInstance) DeleteVM(ctx context.Context) error {
	return nil
}

func (ins *SInstance) DetachDisk(ctx context.Context, diskId string) error {
	return nil
}

func (ins *SInstance) GetBios() cloudprovider.TBiosType {
	return ""
}

func (ins *SInstance) GetBootOrder() string {
	return ""
}

func (ins *SInstance) GetError() error {
	return nil
}

func (ins *SInstance) GetFullOsName() string {
	return ""
}

func (ins *SInstance) GetGlobalId() string {
	return ins.InstanceID
}

func (ins *SInstance) GetId() string {
	return ins.InstanceID
}

func (ins *SInstance) GetInstanceType() string {
	return ins.InstanceType
}

func (ins *SInstance) GetMachine() string {
	return ins.InstanceType
}

func (ins *SInstance) GetHostname() string {
	return ins.host.GetName()
}

func (ins *SInstance) GetName() string {
	return ins.InstanceName
}

func (ins *SInstance) GetOsArch() string {
	return ""
}

func (ins *SInstance) GetOsDist() string {
	return ""
}

func (ins *SInstance) GetOsLang() string {
	return ""
}

func (ins *SInstance) GetOsType() cloudprovider.TOsType {
	return ""
}

func (ins *SInstance) GetOsVersion() string {
	return ""
}

func (ins *SInstance) GetProjectId() string {
	return ins.host.projectId
}

func (ins *SInstance) GetSecurityGroupIds() ([]string, error) {
	return nil, nil
}

func (ins *SInstance) GetStatus() string {
	switch ins.Status {
	case "running":
		return api.VM_RUNNING
	case "stopped":
		return api.VM_READY
	case "terminated", "suspended":
		return api.VM_SUSPEND
	}
	switch ins.TransitionStatus {
	case "starting":
		return api.VM_STARTING
	case "stopping":
		return api.VM_STOPPING
	case "resetting":
		return api.VM_CHANGE_FLAVOR
	}
	return api.VM_UNKNOWN
}

func (ins *SInstance) GetHypervisor() string {
	return ""
}

func (ins *SInstance) GetIDisks() ([]cloudprovider.ICloudDisk, error) {
	return nil, nil
}

func (ins *SInstance) GetIEIP() (cloudprovider.ICloudEIP, error) {
	return nil, nil
}

func (ins *SInstance) GetINics() ([]cloudprovider.ICloudNic, error) {
	return nil, nil
}

func (ins *SInstance) GetVNCInfo(input *cloudprovider.ServerVncInput) (*cloudprovider.ServerVncOutput, error) {
	return nil, nil
}

func (ins *SInstance) GetVcpuCount() int {
	return ins.VcpusCurrent
}

func (ins *SInstance) GetVmemSizeMB() int {
	return ins.MemoryCurrent
}

func (ins *SInstance) GetVdi() string {
	return ""
}

func (ins *SInstance) GetVga() string {
	return ""
}

func (ins *SInstance) RebuildRoot(ctx context.Context, config *cloudprovider.SManagedVMRebuildRootConfig) (string, error) {
	return "", nil
}

func (ins *SInstance) SetSecurityGroups(secgroupIds []string) error {
	return nil
}

func (ins *SInstance) StartVM(ctx context.Context) error {
	return nil
}

func (ins *SInstance) StopVM(ctx context.Context, opts *cloudprovider.ServerStopOptions) error {
	return nil
}

func (ins *SInstance) UpdateUserData(userData string) error {
	return nil
}

func (ins *SInstance) UpdateVM(ctx context.Context, input cloudprovider.SInstanceUpdateOptions) error {
	return nil
}

func (ins *SInstance) GetIHost() cloudprovider.ICloudHost {
	return nil
}

func (ins *SInstance) DeployVM(ctx context.Context, name string, username string, password string, publicKey string, deleteKeypair bool, description string) error {
	return nil
}
